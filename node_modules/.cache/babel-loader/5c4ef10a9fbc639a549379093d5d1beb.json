{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ACER NITRO 2\\\\Desktop\\\\react-image-crop-demo-with-classes-forked\\\\src\\\\index.js\";\nimport ReactDOM from 'react-dom';\nimport React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      src: null,\n      crop: {\n        unit: '%',\n        width: 30,\n        aspect: 16 / 9\n      }\n    };\n\n    this.onSelectFile = e => {\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () => this.setState({\n          src: reader.result\n        }));\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n\n    this.onImageLoaded = image => {\n      this.imageRef = image;\n    };\n\n    this.onCropComplete = crop => {\n      this.makeClientCrop(crop);\n    };\n\n    this.onCropChange = (crop, percentCrop) => {\n      // You could also use percentCrop:\n      // this.setState({ crop: percentCrop });\n      this.setState({\n        crop\n      });\n    };\n  }\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(this.imageRef, crop, 'newFile.jpeg');\n      this.setState({\n        croppedImageUrl\n      });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const pixelRatio = window.devicePixelRatio;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * scaleX, crop.height * scaleY);\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(blob => {\n        if (!blob) {\n          //reject(new Error('Canvas is empty'));\n          console.error('Canvas is empty');\n          return;\n        }\n\n        blob.name = fileName;\n        window.URL.revokeObjectURL(this.fileUrl);\n        this.fileUrl = window.URL.createObjectURL(blob);\n        resolve(this.fileUrl);\n      }, 'image/jpeg', 1);\n    });\n  }\n\n  render() {\n    const {\n      crop,\n      croppedImageUrl,\n      src\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        clas: true,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \"image/*\",\n          onChange: this.onSelectFile\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), src && /*#__PURE__*/_jsxDEV(ReactCrop, {\n        src: src,\n        crop: crop,\n        ruleOfThirds: true,\n        onImageLoaded: this.onImageLoaded,\n        onComplete: this.onCropComplete,\n        onChange: this.onCropChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), croppedImageUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n        alt: \"Crop\",\n        style: {\n          maxWidth: '100%'\n        },\n        src: croppedImageUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 124,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"names":["ReactDOM","React","PureComponent","ReactCrop","App","state","src","crop","unit","width","aspect","onSelectFile","e","target","files","length","reader","FileReader","addEventListener","setState","result","readAsDataURL","onImageLoaded","image","imageRef","onCropComplete","makeClientCrop","onCropChange","percentCrop","height","croppedImageUrl","getCroppedImg","fileName","canvas","document","createElement","pixelRatio","window","devicePixelRatio","scaleX","naturalWidth","scaleY","naturalHeight","ctx","getContext","setTransform","imageSmoothingQuality","drawImage","x","y","Promise","resolve","reject","toBlob","blob","console","error","name","URL","revokeObjectURL","fileUrl","createObjectURL","render","maxWidth","getElementById"],"sources":["C:/Users/ACER NITRO 2/Desktop/react-image-crop-demo-with-classes-forked/src/index.js"],"sourcesContent":["import ReactDOM from 'react-dom';\nimport React, { PureComponent } from 'react';\nimport ReactCrop from 'react-image-crop';\nimport 'react-image-crop/dist/ReactCrop.css';\n\nimport './App.css';\n\nclass App extends PureComponent {\n  state = {\n    src: null,\n    crop: {\n      unit: '%',\n      width: 30,\n      aspect: 16 / 9\n    }\n  };\n\n  onSelectFile = (e) => {\n    if (e.target.files && e.target.files.length > 0) {\n      const reader = new FileReader();\n      reader.addEventListener('load', () =>\n        this.setState({ src: reader.result })\n      );\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  };\n\n  // If you setState the crop in here you should return false.\n  onImageLoaded = (image) => {\n    this.imageRef = image;\n  };\n\n  onCropComplete = (crop) => {\n    this.makeClientCrop(crop);\n  };\n\n  onCropChange = (crop, percentCrop) => {\n    // You could also use percentCrop:\n    // this.setState({ crop: percentCrop });\n    this.setState({ crop });\n  };\n\n  async makeClientCrop(crop) {\n    if (this.imageRef && crop.width && crop.height) {\n      const croppedImageUrl = await this.getCroppedImg(\n        this.imageRef,\n        crop,\n        'newFile.jpeg'\n      );\n      this.setState({ croppedImageUrl });\n    }\n  }\n\n  getCroppedImg(image, crop, fileName) {\n    const canvas = document.createElement('canvas');\n    const pixelRatio = window.devicePixelRatio;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext('2d');\n\n    canvas.width = crop.width * pixelRatio * scaleX;\n    canvas.height = crop.height * pixelRatio * scaleY;\n\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    ctx.imageSmoothingQuality = 'high';\n\n    ctx.drawImage(\n      image,\n      crop.x * scaleX,\n      crop.y * scaleY,\n      crop.width * scaleX,\n      crop.height * scaleY,\n      0,\n      0,\n      crop.width * scaleX,\n      crop.height * scaleY\n    );\n\n    return new Promise((resolve, reject) => {\n      canvas.toBlob(\n        (blob) => {\n          if (!blob) {\n            //reject(new Error('Canvas is empty'));\n            console.error('Canvas is empty');\n            return;\n          }\n          blob.name = fileName;\n          window.URL.revokeObjectURL(this.fileUrl);\n          this.fileUrl = window.URL.createObjectURL(blob);\n          resolve(this.fileUrl);\n        },\n        'image/jpeg',\n        1\n      );\n    });\n  }\n\n  render() {\n    const { crop, croppedImageUrl, src } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div clas>\n          <input type=\"file\" accept=\"image/*\" onChange={this.onSelectFile} />\n        </div>\n        {src && (\n          <ReactCrop\n            src={src}\n            crop={crop}\n            ruleOfThirds\n            onImageLoaded={this.onImageLoaded}\n            onComplete={this.onCropComplete}\n            onChange={this.onCropChange}\n          />\n        )}\n        {croppedImageUrl && (\n          <img alt=\"Crop\" style={{ maxWidth: '100%' }} src={croppedImageUrl} />\n        )}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}